# Task ID: 14
# Title: Update Frontend Fetch Calls
# Status: pending
# Dependencies: 8, 9, 10, 11
# Priority: medium
# Description: Modify frontend JavaScript code to use the new API endpoints and include API key headers.
# Details:
For each JavaScript file that makes API calls to the old /json/*.php endpoints:

1. Identify all fetch calls to old endpoints
2. Replace with new /api/v1/ endpoints
3. Add API key header to fetch calls
4. Update field names in the response handling code

Example transformation:

Old code:
```javascript
fetch('/json/get_events.php')
  .then(response => response.json())
  .then(data => {
    data.forEach(event => {
      console.log(event.EventName, event.Startdate);
    });
  });
```

New code:
```javascript
fetch('/api/v1/events.php', {
  headers: {
    'X-API-Key': 'your-api-key-here' // Store in a config file or environment variable
  }
})
  .then(response => response.json())
  .then(data => {
    data.forEach(event => {
      console.log(event.name, event.date); // Note the updated field names
    });
  });
```

Create a central configuration file for storing the API key:
```javascript
// api-config.js
const API_CONFIG = {
  key: 'your-api-key-here',
  baseUrl: '/api/v1'
};

// Helper function for API calls
async function apiCall(endpoint, params = {}) {
  const url = new URL(API_CONFIG.baseUrl + endpoint, window.location.origin);
  
  // Add query parameters
  Object.keys(params).forEach(key => {
    url.searchParams.append(key, params[key]);
  });
  
  const response = await fetch(url, {
    headers: {
      'X-API-Key': API_CONFIG.key
    }
  });
  
  if (!response.ok) {
    throw new Error(`API error: ${response.status}`);
  }
  
  return response.json();
}

// Usage example:
// apiCall('/events.php', { year: 2023 })
//   .then(data => console.log(data))
//   .catch(error => console.error(error));
```

# Test Strategy:
Test each updated fetch call to ensure it correctly retrieves data from the new API endpoints. Verify the response handling code correctly processes the standardized field names. Test error handling for API errors and network failures.
