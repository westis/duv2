# Task ID: 12
# Title: Create Admin UI for API Keys
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Develop a simple PHP admin page for generating and managing API keys.
# Details:
Create a file named 'api_keys.php' in the admin/ directory:
```php
<?php
// Require admin authentication
session_start();
if (!isset($_SESSION['admin_id'])) {
  header('Location: login.php');
  exit;
}

$db = new mysqli('localhost','user','pass','duv');

// Handle form submission to generate new key
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $userId = $_POST['user_id'] ?? null;
  $expires = $_POST['expires'] ?? null;
  
  if ($userId) {
    // Generate random API key
    $key = bin2hex(random_bytes(32));
    
    $stmt = $db->prepare('INSERT INTO api_keys (`key`, user_id, expires, active) VALUES (?, ?, ?, 1)');
    $stmt->bind_param('sis', $key, $userId, $expires);
    $stmt->execute();
    
    $message = "New API key generated: $key";
  }
}

// Get all active API keys
$keys = [];
$result = $db->query('SELECT k.`key`, k.user_id, CONCAT(u.FirstName, " ", u.LastName) AS user_name, k.expires FROM api_keys k JOIN trunner u ON k.user_id = u.ID WHERE k.active = 1');
while ($row = $result->fetch_assoc()) {
  $keys[] = $row;
}

// Get all users for dropdown
$users = [];
$result = $db->query('SELECT ID, CONCAT(FirstName, " ", LastName) AS name FROM trunner ORDER BY LastName, FirstName');
while ($row = $result->fetch_assoc()) {
  $users[] = $row;
}
?>
<!DOCTYPE html>
<html>
<head>
  <title>API Key Management</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    .message { background-color: #d4edda; color: #155724; padding: 10px; margin-bottom: 20px; }
    form { margin-bottom: 20px; padding: 15px; background-color: #f8f9fa; border: 1px solid #ddd; }
  </style>
</head>
<body>
  <h1>API Key Management</h1>
  
  <?php if (isset($message)): ?>
  <div class="message"><?php echo $message; ?></div>
  <?php endif; ?>
  
  <form method="post">
    <h2>Generate New API Key</h2>
    <div>
      <label for="user_id">User:</label>
      <select name="user_id" required>
        <option value="">Select User</option>
        <?php foreach ($users as $user): ?>
        <option value="<?php echo $user['ID']; ?>"><?php echo htmlspecialchars($user['name']); ?></option>
        <?php endforeach; ?>
      </select>
    </div>
    <div>
      <label for="expires">Expires (optional):</label>
      <input type="date" name="expires">
    </div>
    <button type="submit">Generate Key</button>
  </form>
  
  <h2>Active API Keys</h2>
  <table>
    <thead>
      <tr>
        <th>Key</th>
        <th>User</th>
        <th>Expires</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($keys as $key): ?>
      <tr>
        <td><?php echo $key['key']; ?></td>
        <td><?php echo htmlspecialchars($key['user_name']); ?> (ID: <?php echo $key['user_id']; ?>)</td>
        <td><?php echo $key['expires'] ? $key['expires'] : 'Never'; ?></td>
        <td><a href="revoke_key.php?key=<?php echo urlencode($key['key']); ?>" onclick="return confirm('Are you sure?')">Revoke</a></td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
</body>
</html>
```

Also create a simple 'revoke_key.php' script to deactivate keys:
```php
<?php
session_start();
if (!isset($_SESSION['admin_id'])) {
  header('Location: login.php');
  exit;
}

$key = $_GET['key'] ?? '';
if ($key) {
  $db = new mysqli('localhost','user','pass','duv');
  $stmt = $db->prepare('UPDATE api_keys SET active = 0 WHERE `key` = ?');
  $stmt->bind_param('s', $key);
  $stmt->execute();
}

header('Location: api_keys.php');
```

# Test Strategy:
Test the admin UI by generating new API keys for different users. Verify keys are correctly stored in the database. Test the revocation functionality to ensure keys can be deactivated. Verify the UI correctly displays all active keys.
